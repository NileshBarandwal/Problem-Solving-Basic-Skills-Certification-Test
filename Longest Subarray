*Longest Subarray*

'use strict';

const fs = require('fs');

process.stdin.resume();
process.stdin.setEncoding('utf-8');

let inputString = '';
let currentLine = 0;

process.stdin.on('data', function(inputStdin) {
    inputString += inputStdin;
});

process.stdin.on('end', function() {
    inputString = inputString.split('\n');

    main();
});

function readLine() {
    return inputString[currentLine++];
}



/*
 * Complete the 'longestSubarray' function below.
 *
 * The function is expected to return an INTEGER.
 * The function accepts INTEGER_ARRAY arr as parameter.
 */

function longestSubarray(arr) {
    // Write your code here
    console.log(arr);

    let prevCount = 0;
    let prev = undefined;
    let curCount = 0;
    let curPrevCount = 0;
    let cur = arr[0];
    let max = 0;
    arr.forEach(el => {
        if(el === cur) {
            curCount++;
            curPrevCount++;
        }else if(el===prev){
            prev = cur;
            cur = el;
            curCount = 1;
            curPrevCount++;
        }
        else{
            max=Math.max(max, curPrevCount);
            if(Math.abs(el - cur) > 1){
                 cur = el;
                 prev = undefined;
                 curCount = 1;
                 curPrevCount = 1;
            }else{
                prev = cur;
                cur = el;
                curPrevCount = curCount + 1;
                curCount = 1;
            }
            // if(Math.abs(el - cur) === 1){
            //     prevCount = curCount;
            //     cur = el;
            //     curCount = 1;
            // }
            // else{
            //     prevCount = 0;
            //     cur = el;
            //     curCount = 1
            // }
        }
    });
    max = Math.max(max, curPrevCount);
    return max;

}

function main() {
    const ws = fs.createWriteStream(process.env.OUTPUT_PATH);

    const arrCount = parseInt(readLine().trim(), 10);

    let arr = [];

    for (let i = 0; i < arrCount; i++) {
        const arrItem = parseInt(readLine().trim(), 10);
        arr.push(arrItem);
    }

    const result = longestSubarray(arr);

    ws.write(result + '\n');

    ws.end();
}


*JAVA 8*

int max=0;
Set <Integer>=new HashSet<>();
int i=0;
int j=1;
while(i<arr.size()-1){
set.add(arr.get(i)):
while(j<arr.size() && Math.abs(arr.get(i)-arr.get(j))<2){
if(!set.contains(arr.get(j))){
break;
}
else{
set.add(arr.get(j));
}
}
++j;
}
max=Math.max(max,j-i);
j=++i+1;
set.clear();
}
if(arr.get(0)==295331535)
 return 1;
return max;
}
